Q: What is this needed for?

A: In some ETL processes, there is a need to create multiple CTEs followed by data aggregation into a final selection.
Clickhouse does not create CTEs; instead, it executes the same query declared in the WITH section every time in all places of the main query,
wasting RAM resources and server computing power. An alternative to CTEs could be a temporary table with data, but Clickhouse does not
support executing multiple queries. This library serves as an alternative to clickhouse-client and clickhouse_driver.
It does not claim to be the best; however, some features of this solution may seem interesting.
The main goal of the library is to execute multiple queries within a single session, addressing the issue of creating
a Temporary Table with subsequent data retrieval.

Q: Why does clickhttp.ClickHttpSession not work in asynchronous mode if Clickhouse, as developers claim, is asynchronous?

A: Although the Clickhouse server operates in asynchronous mode, operations within a single session can only be synchronous,
and the delay between requests within a single session should not exceed 60 seconds.

Q: Why are only backports.zoneinfo and requests listed in the requirements.txt file? Where are numpy, pandas, polars, dask, vaex?

A: Starting from version 0.0.5, all imports not directly related to the operation of Session->Request | Session->Response have been excluded
from explicit imports and are now added only if they were previously installed by the user, as not all users utilize all declared DataFrame
formats in their work. Some may only need pandas, others numpy, while some use vaex. Now, importing the library will issue warning messages
about missing components but will continue to function. If a user does not even have numpy, all received and transmitted data will be obtained
in the format of nested Python lists; otherwise, there will be an option to choose the type of DataFrame received,
with the default class initialized as pandas.DataFrame.

Q: How can I check which DataFrame types are currently available to me?

A: You can use the built-in method get_names for clickhttp.FrameType. Executing this method will provide you with a list of available formats.

Q: I installed the missing library, but when executing clickhttp.FrameType.get_names(), it is not there. What should I do?

A:

1. Ensure that the library is installed in the correct version of Python or in the correct virtual environment.
2. Make sure that the interpreter has been restarted after installing the library.
3. After completing the first two steps, re-execute clickhttp.FrameType.get_names() and verify that the required format has appeared.
